plugins {
    id 'org.ajoberstar.grgit' version '3.0.0'
}

apply plugin: 'application'

mainClassName = 'de.bwravencl.controllerbuddy.gui.Main'
version = "${org.ajoberstar.grgit.Grgit.open(dir: projectDir).describe(longDescr: true).replaceFirst(java.util.regex.Pattern.quote('-'), '.').replaceFirst(java.util.regex.Pattern.quote('-g'), '-')}"

sourceCompatibility = 12
targetCompatibility = 12

def genDir = 'gen'
def versionDir = "$genDir/main/java"

task generateVersion {
    def outputDir = file("$versionDir")
    outputs.dir outputDir
    doFirst {
        def srcFile = new File(outputDir, "de/bwravencl/controllerbuddy/Version.java")
        srcFile.parentFile.mkdirs()
        srcFile.write("""package de.bwravencl.controllerbuddy;\n
public class Version {
\tpublic static String getVersion() {
\t\treturn "$project.version";
\t}
}
""")
    }
}

task cleanVersion {
    delete genDir
}

clean {
    dependsOn cleanVersion
}

compileJava {
    dependsOn generateVersion
    source generateVersion.outputs.files, sourceSets.main.java
    options.compilerArgs += ["-Xlint:deprecation"]
}

task copyLibs(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

task jpackage(type: Exec) {
    dependsOn jar, copyLibs
    commandLine 'jpackage', 'create-image', '--input', "$buildDir/libs", '--output', "$buildDir/dist", '--name', "$project.name", '--class', "$mainClassName", '--main-jar', "${project.name}-${version}.jar", '--identifier', 'de.bwravencl.controllerbuddy', '--app-version', "$version", '--icon', "$projectDir/icon.ico", '--copyright', '\u00A9 Matteo Hausner', '--add-modules', 'java.sql,jdk.jpackage.runtime,jdk.unsupported', '--strip-native-commands', '--singleton', '--verbose'
}

task zip(type: Zip) {
    dependsOn jpackage
    from "$buildDir/dist"
    include "$project.name/**"
    destinationDir file("$buildDir/dist")
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    jnaVersion = '5.1.0'
    lwjglVersion = '3.2.0'
}

dependencies {
    compile 'commons-cli:commons-cli:1.4',
            'com.github.git-moss:purejavahidapi:ac30486297',
            'com.google.code.gson:gson:2.8.5',
            "net.java.dev.jna:jna:$jnaVersion",
            "net.java.dev.jna:jna-platform:$jnaVersion",
            "org.lwjgl:lwjgl:$lwjglVersion",
            "org.lwjgl:lwjgl:$lwjglVersion:natives-linux",
            "org.lwjgl:lwjgl:$lwjglVersion:natives-macos",
            "org.lwjgl:lwjgl:$lwjglVersion:natives-windows",
            "org.lwjgl:lwjgl-glfw:$lwjglVersion",
            "org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-linux",
            "org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-macos",
            "org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-windows",
            "org.lwjgl:lwjgl-opengl:$lwjglVersion",
            "org.lwjgl:lwjgl-opengl:$lwjglVersion:natives-windows",
            "org.lwjgl:lwjgl-openvr:$lwjglVersion",
            "org.lwjgl:lwjgl-openvr:$lwjglVersion:natives-windows"
}

apply plugin: 'eclipse'

tasks.eclipse.dependsOn generateVersion

eclipse {
    classpath {
        file {
            whenMerged { cp ->
                cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder("$versionDir", null) )
            }
        }
    }
}
