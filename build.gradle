plugins {
    id 'org.ajoberstar.grgit' version '3.1.1'
}

apply plugin: 'application'

mainClassName = 'de.bwravencl.controllerbuddy.gui.Main'
version = "${org.ajoberstar.grgit.Grgit.open(dir: projectDir).describe(longDescr: true).replaceFirst(java.util.regex.Pattern.quote('-'), '.').replaceFirst(java.util.regex.Pattern.quote('-g'), '-')}"

sourceCompatibility = 12
targetCompatibility = 12

def genDir = 'gen'
def versionDir = "$genDir/main/java"
def runtimeDir = "$buildDir/runtime"
def distDir = "$buildDir/dist"

task cleanVersion {
    delete genDir
}

task generateVersion {
    dependsOn cleanVersion
    def outputDir = file("$versionDir")
    outputs.dir outputDir
    doFirst {
        def srcFile = new File(outputDir, "de/bwravencl/controllerbuddy/version/Version.java")
        srcFile.parentFile.mkdirs()
        srcFile.write("""package de.bwravencl.controllerbuddy.version;\n
public class Version {

\tpublic static final String VERSION = "$project.version";

}
""")
    }
}

clean {
    dependsOn cleanVersion
}

compileJava {
    dependsOn generateVersion
    source generateVersion.outputs.files, sourceSets.main.java
    options.compilerArgs += ["-Xlint:deprecation"]
}

task copyLibs(type: Copy) {
    from configurations.runtime
    into "$buildDir/libs"
}

task jlink(type: Exec) {
    doFirst {
        delete runtimeDir
    }
    commandLine 'jlink', '--output', "$runtimeDir", '--strip-debug', '--no-header-files', '--no-man-pages', '--strip-native-commands', '--bind-services', '--add-modules', 'java.desktop,java.sql,jdk.unsupported'
}

task customizeLoggingProperties() {
    dependsOn jlink
    doLast {
        def loggingPropertiesFile = "$runtimeDir/conf/logging.properties"
        ant.replace(file: "$loggingPropertiesFile", token: 'handlers= java.util.logging.ConsoleHandler', value: '#handlers= java.util.logging.ConsoleHandler')
        ant.replace(file: "$loggingPropertiesFile", token: '#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler', value: 'handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler')
        ant.replace(file: "$loggingPropertiesFile", token: 'java.util.logging.FileHandler.pattern = %h/java%u.log', value: 'java.util.logging.FileHandler.pattern = %t/ControllerBuddy.log')
        ant.replace(file: "$loggingPropertiesFile", token: 'java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter', value: 'java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter')
    }
}

task jpackage(type: Exec) {
    dependsOn jar, copyLibs, customizeLoggingProperties
    doFirst {
        delete "$distDir/$project.name"
    }
    commandLine 'jpackage', '--input', "$buildDir/libs", '--dest', "$distDir", '--package-type', 'app-image', '--name', "$project.name", '--runtime-image', "$runtimeDir", '--main-class', "$mainClassName", '--main-jar', "${project.name}-${version}.jar", '--app-version', "$version", '--icon', "$projectDir/icon.ico", '--copyright', "Copyright ${new Date().format('yyyy')} Matteo Hausner", '--vendor', 'Matteo Hausner', '--verbose'
}

task zip(type: Zip) {
    dependsOn jpackage
    from "$buildDir/dist"
    include "$project.name/**"
    destinationDir file("$buildDir/dist")
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    jnaVersion = '5.4.0'
    lwjglVersion = '3.2.3'
}

dependencies {
    compile 'commons-cli:commons-cli:1.4',
            'com.github.git-moss:purejavahidapi:9e9d54b33d',
            'com.google.code.gson:gson:2.8.5',
            "net.java.dev.jna:jna:$jnaVersion",
            "net.java.dev.jna:jna-platform:$jnaVersion",
            "org.lwjgl:lwjgl:$lwjglVersion",
            "org.lwjgl:lwjgl:$lwjglVersion:natives-linux",
            "org.lwjgl:lwjgl:$lwjglVersion:natives-macos",
            "org.lwjgl:lwjgl:$lwjglVersion:natives-windows",
            "org.lwjgl:lwjgl-glfw:$lwjglVersion",
            "org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-linux",
            "org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-macos",
            "org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-windows",
            "org.lwjgl:lwjgl-opengl:$lwjglVersion",
            "org.lwjgl:lwjgl-opengl:$lwjglVersion:natives-windows",
            "org.lwjgl:lwjgl-openvr:$lwjglVersion",
            "org.lwjgl:lwjgl-openvr:$lwjglVersion:natives-windows"
}

apply plugin: 'eclipse'

tasks.eclipse.dependsOn generateVersion

eclipse {
    classpath {
        file {
            whenMerged { cp ->
                cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder("$versionDir", null) )
            }
        }
    }
}
