plugins {
    id 'com.stehno.natives' version '0.3.1'
    id 'org.ajoberstar.grgit' version '3.0.0-rc.2'
    id 'us.kirchmeier.capsule' version '1.0.2'
}

apply plugin: 'application'

def genDir = 'gen'
def versionDir = "$genDir/main/java"

task generateVersion {
    def outputDir = file("$versionDir")
    outputs.dir outputDir
    doFirst {
        def srcFile = new File(outputDir, "de/bwravencl/controllerbuddy/Version.java")
        srcFile.parentFile.mkdirs()
        srcFile.write("""package de.bwravencl.controllerbuddy;\n
public class Version {
\tpublic static String getVersion() {
\t\treturn "$project.version";
\t}
}
""")
    }
}

task cleanVersion {
    delete genDir
}

clean {
    dependsOn cleanVersion
}

compileJava {
    dependsOn generateVersion
    source generateVersion.outputs.files, sourceSets.main.java
}

mainClassName = 'de.bwravencl.controllerbuddy.gui.Main'
version = "${org.ajoberstar.grgit.Grgit.open(dir: projectDir).describe(longDescr: true).replaceFirst(java.util.regex.Pattern.quote('-'), '.').replaceFirst(java.util.regex.Pattern.quote('-g'), '-')}"

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    jinputVersion = '2.0.9'
    jnaVersion = '4.5.2'
    lwjglVersion = '3.2.0'
}

dependencies {
    compile     'commons-cli:commons-cli:1.4',
                'com.github.nyholku:purejavahidapi:322fdb03b7',
                'com.google.code.gson:gson:2.8.5',
                "net.java.dev.jna:jna:$jnaVersion",
                "net.java.dev.jna:jna-platform:$jnaVersion",
                "net.java.jinput:jinput:$jinputVersion",
                "org.lwjgl:lwjgl:$lwjglVersion",
                "org.lwjgl:lwjgl:$lwjglVersion:natives-windows",
                "org.lwjgl:lwjgl-opengl:$lwjglVersion",
                "org.lwjgl:lwjgl-opengl:$lwjglVersion:natives-windows",
                "org.lwjgl:lwjgl-openvr:$lwjglVersion",
                "org.lwjgl:lwjgl-openvr:$lwjglVersion:natives-windows"
    compileOnly "net.java.jinput:jinput:$jinputVersion:natives-all"
}

natives {
    configurations = ['compileOnly']
    libraries {
        include = ['jinput-dx8_64.dll', 'jinput-raw_64.dll', 'jinput-wintab.dll', 'libjinput-linux64.so', 'libjinput-osx.jnilib']
    }
}

run {
    dependsOn includeNatives
    systemProperty 'java.library.path', "$buildDir/natives"
}

task capsule(type: FatCapsule){
    dependsOn includeNatives
    applicationClass 'de.bwravencl.controllerbuddy.gui.Main'
    baseName 'ControllerBuddy'
    from fileTree(dir: "$buildDir/natives", includes: ['*.dll', '*.jnilib', '*.so'])
}

apply plugin: 'eclipse'

tasks.eclipse.dependsOn generateVersion, includeNatives

eclipse {
    classpath {
        file {
            withXml {
                def node = it.asNode()
                node.find { it.@path.endsWith('jinput-2.0.9-natives-all.jar') }.find { child-> child.name() == 'attributes' }.appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:"$buildDir/natives"])
            }
            whenMerged { cp ->
                cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder("$versionDir", null) )
            }
        }
    }
}
